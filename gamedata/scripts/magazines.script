----------------------------------------------------------------
-- Refactored magazines by Arti and Raven. Most of this code is cribbed from wuut_mags original, but cleaned up significantly.
----------------------------------------------------------------

--Function alises
gc						 	= game.translate_string
get_mag_data 				= magazine_binder.get_data
set_mag_data 				= magazine_binder.set_data
is_supported_weapon 		= magazine_binder.is_supported_weapon
get_magazine_caliber 		= magazine_binder.get_magazine_caliber
is_compatible 				= magazine_binder.is_compatible
isMagazine					= magazine_binder.is_magazine
is_magazine					= magazine_binder.is_magazine
is_carried_mag				= magazine_binder.is_carried_mag
toggle_carried_mag			= magazine_binder.toggle_carried_mag
get_carried_mags			= magazine_binder.get_carried_mags
room_in_pouch				= magazine_binder.room_in_pouch
get_retool_section			= magazine_binder.get_retool_section
get_weapon_base_type		= magazine_binder.get_weapon_base_type
get_mags_for_basetype		= magazine_binder.get_mags_for_basetype
print_dbg					= magazine_binder.print_dbg
get_mags_by_ammo_type		= magazine_binder.get_mags_by_ammo_type


-- global flag to interrupt reloads (set on key press and stuff)
local interrupt_reload = false
local jammed_guns = {}
local load_timeout = {}

------------------------
-- SECTION debug info --
------------------------

function dump_data(data)
    local s = ""
	for k,v in pairs(data.loaded) do
		s = s .. v .. " "
	end
	print_dbg("Mag size: %s. Rounds loaded: %s. Section: %s. Rounds: %s", data.size, #data.loaded, data.section, s)
end

function parent_is_box(obj)
	local parent = obj:parent()
	if parent:id() == 0 then return false end
	local se_parent = alife_object(parent:id())
	if se_parent:clsid() == clsid.inventory_box_s then
		return true
	end
	return false
end

--------------------------------------
-- SECTION mag un/loading functions --
--------------------------------------


-- Get the time delay between loading/unloading rounds from/to magazine
--
-- **mag_section** *(string)* = section of the mag to get **load_delay** param if **ignore_loaddelay** is false 
--
-- **is_unload** *(bool)* = should we get mag unload time
function get_mag_time(mag_section,is_unload)
    is_unload=is_unload or false

	local load_factor=magazines_mcm.get_config('mag_loadtime_factor')
	local unload_factor=magazines_mcm.get_config('mag_unloadtime_factor')
	local default_delay=SYS_GetParam(2, "tch_mag_base", "load_delay") or 0.4

	if magazines_mcm.get_config('ignore_loaddelay') then
		default_delay = 0.4
	else
		if not is_unload then
			default_delay=SYS_GetParam(2, mag_section, "load_delay") or default_delay
		end
	end
    -- this could benefit from rounding to 0.01 but calling math.floor on each iteration is much worse
	if not is_unload then
		return default_delay*load_factor
	else
		return default_delay*unload_factor
	end
end

function timed_refresh()
	disable_info("sleep_active")
	CreateTimeEvent("mag_redux", "timed_refresh", 0.1, timer_refresh)
end

function timer_refresh()
	inventory_refresh()
	return true
end

function inventory_refresh(mode) --safer way to refresh inventory, mode == 1  refreshes sorting.
	if not mode then
		mode = magazines_mcm.get_config("sort_inv") and 1 or 2
	end
	local inventory = GetActorMenu()
	if mode == 1 then
		local sort = nil
		for i=1,#inventory.sort_btn do
			if inventory.sort_btn[i]:GetCheck() then
				sort = i
			end
		end
		inventory:On_Sort(sort or 1,false)
	else
		inventory:UpdateItems()
	end
end
local ammo_maps = {} --cacheing. this function will get called a lot in combat.  ammo_maps gets niled in load_weapon should be enough protect against id recycling and weapon rechamper upgrades
function get_ammo_map(id)
	if not ammo_maps[id] then
		ammo_maps[id] = invert_table(utils_item.get_ammo(nil, id))
	end
	-- print_dbg("ammo_maps[id][1]:%s ammo_maps[id]:%s", ammo_maps[id] and ammo_maps[id][1],  ammo_maps[id])
	return ammo_maps[id]
end

local function se_item_on_unregister(se_obj, typ)
	local id = se_obj.id
	ammo_maps[id] = nil
end

function on_item_drag_dropped(item, weapon, from_slot, to_slot)

	print_dbg("on_item_drag_dropped " .. item:section() .. " on " .. weapon:section() .. " to_slot " .. to_slot)

	-- Check capability
	if not ((from_slot == EDDListType.iDeadBodyBag and to_slot == EDDListType.iDeadBodyBag) or (from_slot == EDDListType.iActorBag  and (to_slot == EDDListType.iActorBag or to_slot == EDDListType.iActorSlot))) then
        return
    end
	if(item:id() == weapon:id()) then
		return
	end
	
	local is_box_mode = (parent_is_box(item) and from_slot == EDDListType.iDeadBodyBag) and true or false

	-- bullet to mag
	if(IsAmmo(item) and is_magazine(weapon)) then
		-- check compatibility, then fire (heh) the loading loop
		local ammos = invert_table(get_magazine_caliber(weapon))
		local ammo_sec = item:section()
		print_dbg("Checking compat for ammo sec %s", ammos[ammo_sec])
		if ammos[ammo_sec] ~= nil then
			-- start loading loop
		    local capacity = SYS_GetParam(2, weapon:section(), "max_mag_size")  or 20
			print_dbg("start loading loop")
			interrupt_reload = false
			if magazines_mcm.get_config("fast_loading") and is_box_mode then
				fast_load_magazine(weapon, item)
			else
				load_magazine(weapon, item, ammos[ammo_sec], capacity, 0)
			end
		end
	end
	-- mag to weapon
	if is_magazine(item) and IsWeapon(weapon) and is_compatible(weapon, item) then
		if weapon:weapon_in_grenade_mode() then return end
		-- init loading of weapon
		if get_mag_data(weapon:id()) ~= nil then
			print_dbg("Weapon already has magazine, ejecting first")
			eject_magazine(weapon)
		end
		print_dbg("Begin loading mag %s into weapon %s", item:section(), weapon:section())
		if to_slot == EDDListType.iActorBag then
			load_weapon(weapon, item)
		else
			local pre_table = count_ammo(weapon)
			weapon:switch_state(7)
			on_key_press()
			disable_info("sleep_active")
			CreateTimeEvent("Mag_redux", "delay_weapon"..weapon:id(), 0.1, delay_load_weapon, weapon, item, pre_table)
		end

	end
end

function load_weapon(weapon, magazine)
	if is_magazine(magazine) and IsWeapon(weapon) and is_compatible(weapon, magazine) then
		local wep_id = weapon:id()
		local mag_id = magazine:id()
		ammo_maps[wep_id] = nil -- nil this here to protect against weapon caliber changes or id recycling.
		
		-- check for empty mag and initialize
		local mag_data = get_mag_data(mag_id)
		if mag_data ~= nil then
			set_mag_data(wep_id, mag_data)
			set_mag_data(mag_id, nil)
			alife_release_id(mag_id)
			prep_weapon(weapon, false)
		end
	end
end

function delay_load_weapon(weapon, magazine, pre_table, eject)
	local tg = time_global()
	-- extra timer stuff so we don't let the time event linger
	local id = weapon:id()
	if not load_timeout[id] then
		load_timeout[id] = tg
	end
	if tg > load_timeout[id] + 10000 then
		load_timeout[id] = nil
		return true
	end

	if eject and get_mag_data(weapon:id()) ~= nil then
		eject_magazine(weapon)
	end

	if weapon:get_state() == 0 then
		weapon:unload_magazine()
		load_weapon(weapon, magazine)
		refund_ammo(weapon, pre_table)
		load_timeout[id] = nil
		return true
	end
	return false
end

-- When weapon is reloaded in any way, it will subtract a box from player inventory. We don't want this to happen - loading should only happen from magazines. Record the prior amount of ammo before reload and refund it afterwards.
function count_ammo(weapon)
	local ammo_table = {}
	local ammo_types = utils_item.get_ammo(weapon:section(), weapon:id())
	for i=1,#ammo_types do
		ammo_table[ammo_types[i]] = 0
	end

	db.actor:inventory_for_each(function (item)
		local item_section = item:section()
		if ammo_table[item_section] then
			ammo_table[item_section] = ammo_table[item_section] + item:ammo_get_count()
		end 
	end)
	return ammo_table
end
-- Refund ammo.
function refund_ammo(weapon, pre_ammo_table)
	if rax_inventory_highlights_mcm  then -- yes i am adding a compatablity patch with my own mod. 
		rax_inventory_highlights_mcm.temp_disable() --don't flag this magazine as new.
	end
	local post_ammo_table = count_ammo(weapon)
	for ammo_type, count in pairs(pre_ammo_table) do
		local to_refund = count - post_ammo_table[ammo_type]
		if to_refund > 0 then						
			create_ammo(ammo_type, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), AC_ID, to_refund)
		end
	end
end

function check_eject_magazine(weapon)
	if get_mag_data(weapon:id()) and not weapon:weapon_in_grenade_mode() then
		return gc("st_mag_eject_magazine")
	end
end

function weapon_in_slot(weapon)
	local carried_weapons = {}
	for i=1, 3 do
		if db.actor:item_in_slot(i) then
			carried_weapons[db.actor:item_in_slot(i):id()] = true
		end
	end
	return carried_weapons[weapon:id()]
end

function eject_magazine(weapon)
	if rax_inventory_highlights_mcm then 
		rax_inventory_highlights_mcm.temp_disable() --don't flag this magazine as new.
	end
	if weapon:weapon_in_grenade_mode() then return end
	local id = weapon:id()
	local mag_data = get_mag_data(id)
	if mag_data then
		se_mag = alife_create_item(mag_data.section, weapon:parent())
		if se_mag then
			local copy = {}
			copy_table(copy, mag_data)
			weapon:unload_magazine()
			set_mag_data(se_mag.id, copy)
			if #copy.loaded > 0 and weapon_in_slot(weapon) then
				toggle_carried_mag(se_mag.id)
			end
			set_mag_data(id, false)
			dump_data(copy)
		else
			printf("Failed to create magazine %s. This is bad, contact @arti.", mag_data.section)
		end
	end
end

-- locate appropriate mag in vest
function find_magazine(weapon, ammo_type)
	if not ammo_type then
		ammo_type = utils_item.get_ammo(nil, weapon:id())[weapon:get_ammo_type()+1]
	end
	local carried_mags = {}
	get_carried_mags(carried_mags)
	local largest_id = nil
	local largest_of_type = nil
	for k,v in pairs(carried_mags) do
		print_dbg("checking id %s, type is %s, %s %s rounds loaded", k, v.section, #v.loaded, stack.peek(v.loaded))
		if is_compatible(weapon, v.section)  then
			if largest_id == nil or #v.loaded > #carried_mags[largest_id].loaded then 
				print_dbg("largest so far is %s", k)
				largest_id = k
			end
			if stack.peek(v.loaded) == ammo_type and (largest_of_type == nil or #v.loaded > #carried_mags[largest_of_type].loaded) then 
				print_dbg("largest of type so far is %s", k)
				largest_of_type = k
			end
 
		end
	end
	if largest_of_type then
		return level.object_by_id(largest_of_type)	
	elseif largest_id then
		return level.object_by_id(largest_id)
	else return nil end
end

--count of magazines by ammo type of first round in vest
function count_magazines(weapon)
	local carried_mags = {}
	local mag_inv = {}
	
	get_carried_mags(carried_mags)
	for k,v in pairs(carried_mags) do
		if is_compatible(weapon, v.section) and #v.loaded >0 then
			local first_round_sec = stack.peek(v.loaded) 
			mag_inv[first_round_sec] = (mag_inv[first_round_sec] or 0) + 1
		end
	end
	return mag_inv
end

function actor_on_weapon_reload(actor, weapon, ammo_total)
	
	local weapon = db.actor:active_item()
	
	-- cancel reload only if we have a valid mag
	if not weapon or not is_supported_weapon(weapon) or weapon:weapon_in_grenade_mode() then return end

	if is_jammed_weapon(weapon) then
		weapon_unjammed(weapon)
		local hud_section = SYS_GetParam(0, weapon:section(), "hud")
		if SYS_GetParam(0, hud_section, "anm_reload_misfire") == nil then
			-- actually do the weapon replace logic here
			unjam_weapon(weapon)
		end
		return
	end
	-- find appropriate magazine
	local mag = find_magazine(weapon)
		-- do the reload
	if not mag then 
		print_dbg("No ready mags found, not reloading")
		on_key_press()
		disable_info("sleep_active")
		CreateTimeEvent("Mag_redux", "cancel_reload"..weapon:id(), 0.1, cancel_reload, weapon)
		return 
	end
	
	local pre_table = count_ammo(weapon)
	weapon:switch_state(7)
	-- eject_magazine(weapon)
	on_key_press()
	disable_info("sleep_active")
	CreateTimeEvent("Mag_redux", "delay_weapon"..weapon:id(), 0.1, delay_load_weapon, weapon, mag, pre_table, true)
	
end

function cancel_reload(weapon)
	weapon:switch_state(2)
	return true
end

function unjam_weapon(weapon)
	local id = weapon:id()
	local data = {}
	local slot = db.actor:active_slot()
	copy_table(data, get_mag_data(id))
	actor_effects.use_weapon(0)
	local ammo_loaded = weapon:get_ammo_in_magazine()
	-- local fire_queue = 0 -- this shit complicated do later
	local old_weapon = alife_object(weapon:id())
	local new_weapon = alife_clone_weapon(old_weapon)
	weapon_unjammed(weapon)
	print_dbg("New weapon should have %s ammo", #data.loaded)
	on_key_press()
	disable_info("sleep_active")
	CreateTimeEvent("Mag_redux", "unjam_weapon", 0.5, unjam_weapon_timer, new_weapon.id, data, slot)
end

function unjam_weapon_timer(weapon_id, data, slot)
	utils_obj.play_sound("handgun_unjam")
	local weapon = level.object_by_id(weapon_id)
	set_mag_data(weapon_id, nil)
	set_mag_data(weapon_id, data)
	prep_weapon(weapon, false)
	db.actor:move_to_slot(weapon, slot)
	actor_effects.use_weapon(1)
	return true
end
-----------------------------------------
-- SECTION rounds un/loading functions --
-----------------------------------------
-- iterate inventory and return the next box for this ammo type. return nil if nothing found
function find_next_box(ammo_section, id)
	local item_to_get = nil
	function grab_inv_items(npc, item)
		if IsAmmo(item) then 
			print_dbg("checking ammo: " .. item:section())
			if ammo_section == item:section() and item:id() ~= id then
				item_to_get = item
				print_dbg("gottem")
			end
		end
	end
	db.actor:iterate_inventory(grab_inv_items)
	return item_to_get
end



-- position is ammo type as number
function load_magazine(magazine, ammo_box, position, capacity, flip, delay)
	-- Pepsifan04
	-- added 'optional' delay to avoid calling get_mag_time on each iteration
	print_dbg("Try load magazine, interrupt_reload state: %s", interrupt_reload)
	delay = delay or get_mag_time(magazine:section(),true)
	if interrupt_reload or ammo_box == nil then 
		print_dbg("ending load prematurely. is ammo box nil? %s", ammo_box == nil)
		interrupt_reload = false
		inventory_refresh()
		return true
	end
	
	local id = magazine:id()
	local mag_data = get_mag_data(id)
	if (#mag_data.loaded >= capacity) then
		print_dbg("ending load with full magazine")
		inventory_refresh()
		return true
	end
	local num_bullets = ammo_box:ammo_get_count()
	local ammo_section = ammo_box:section()
	flip = math.fmod(flip + 1, 3)
	if num_bullets == 1 then
		print_dbg("Searching for next box")
		new_ammo_box = find_next_box(ammo_section, ammo_box:id())
		alife_release_id(ammo_box:id())
		ammo_box = new_ammo_box
	else
		ammo_box:ammo_set_count(num_bullets - 1)
	end
	stack.push(mag_data.loaded, ammo_section)
	set_mag_data(id, mag_data)
	print_dbg("Loaded 1 round of type %s. There are %s rounds loaded total", position, #mag_data.loaded)
	xr_sound.set_sound_play(AC_ID,"reload_shell")
	inventory_refresh()
	disable_info("sleep_active")
	CreateTimeEvent("Mag_redux","load_mag"..flip, delay, load_magazine, magazine, ammo_box, position, capacity, flip, delay)
	return true
end


function unload_magazine(magazine, flip, delay)
	-- Pepsifan04
	-- added 'optional' delay to avoid calling get_mag_time on each iteration
	delay = delay or get_mag_time(magazine:section(),true)
	print_dbg("Start unload magazine")
	local id = magazine:id()
	local mag_data = get_mag_data(id)
	if not mag_data or #mag_data.loaded == 0 or interrupt_reload then
		print_dbg("ending unload prematurely.")
		interrupt_reload = false
		inventory_refresh()
		item_weapon.ammo_aggregation_full(0)
		return true
	end

	local round = stack.pop(mag_data.loaded)
	flip = math.fmod(flip + 1, 3)
	set_mag_data(id, mag_data)
	if round ~= nil then
		print_dbg("Unloaded 1 round of type %s. There are %s rounds left.", round, #mag_data.loaded)
		local parent = magazine:parent()
        
		create_ammo(round, parent:position(), parent:level_vertex_id(), parent:game_vertex_id(), parent:id(), 1)
		disable_info("sleep_active")
		CreateTimeEvent("Mag_redux","unload_mag"..flip, delay, unload_magazine, magazine, flip, delay)
	else
		item_weapon.ammo_aggregation_full(0)
	end
	inventory_refresh()
	return true
end

function fast_load_magazine(magazine, box)
	local mag_data = get_mag_data(magazine:id())
	local ammo_sec = box:section()
	local parent = box:parent()
	local ammo_to_load = SYS_GetParam(2, magazine:section(), "max_mag_size") - #mag_data.loaded
	local boxes_to_load = {}
	local count_so_far = 0
	local function itr_box(temp, item)
		if item:section() == ammo_sec and count_so_far < ammo_to_load then
			boxes_to_load[item:id()] = true
			count_so_far = count_so_far + item:ammo_get_count()
		end
	end
	parent:iterate_inventory_box(itr_box)
	for k,v in pairs(boxes_to_load) do
		local ammo_box = level.object_by_id(k)
		local loaded = ammo_box:ammo_get_count() > ammo_to_load and ammo_to_load or ammo_box:ammo_get_count()
		local release_box = loaded == ammo_box:ammo_get_count()
		for i=1,loaded do
			stack.push(mag_data.loaded, ammo_sec)
		end

		if release_box then
			ammo_to_load = ammo_to_load - ammo_box:ammo_get_count()
			alife_release_id(k)
		else
			ammo_box:ammo_set_count(ammo_box:ammo_get_count() - loaded)
		end
	end
	xr_sound.set_sound_play(AC_ID,"reload_shell")
	timed_refresh()
end

function fast_unload_magazine(magazine)
	local ammo_to_make = {}
	local mag_data = get_mag_data(magazine:id())
	while #mag_data.loaded > 0 do
		local round = stack.pop(mag_data.loaded)
		if not ammo_to_make[round] then
			ammo_to_make[round] = 1
		else
			ammo_to_make[round] = ammo_to_make[round] + 1
		end
	end
	set_mag_data(magazine:id(), mag_data)
	local to_spawn = magazine:parent() ~= nil and magazine:parent() or db.actor
	for k,v in pairs(ammo_to_make) do
		create_ammo(k, to_spawn:position(), to_spawn:level_vertex_id(), 	to_spawn:game_vertex_id(), to_spawn:id(), v)
	end
	timed_refresh()
end

function on_key_press(key)
	if not interrupt_reload then
		print_dbg("Interrupting reload")
		interrupt_reload = true
	end
	if key then
		local bind = dik_to_bind(key)
		if bind == key_bindings.kWPN_RELOAD then
			local current_weapon = db.actor:item_in_slot(db.actor:active_slot())
			if current_weapon and is_supported_weapon(current_weapon) then
				actor_on_weapon_reload(db.actor, current_weapon)
			end
		end
	end
end

function unload_ammo(obj)
	if is_magazine(obj) then
		local id = obj:id()
		local mag_data = get_mag_data(id)
		if mag_data and #mag_data.loaded > 0 then
			return gc("st_mag_unload_ammo")
		end
	end
end

function func_unload_ammo(obj)
	if is_magazine(obj) then
		local id = obj:id()
		local mag_data = get_mag_data(id)
		if mag_data and #mag_data.loaded > 0 then
			interrupt_reload = false
			if magazines_mcm.get_config("fast_loading") and parent_is_box(obj) then
				fast_unload_magazine(obj)
			else
				disable_info("sleep_active")
				CreateTimeEvent("mag_redux","unload_mag " .. id, 0.1, unload_magazine, obj, 0)
			end
		end
	end
end

function loadout_precondition(obj)
	if is_magazine(obj) then
		local id = obj:id()
		if is_carried_mag(id) then
			return game.translate_string("st_mag_loadout_remove")
		elseif room_in_pouch(id)then
			return game.translate_string("st_mag_loadout_add")
		end
	end
end
		
function loadout_func(obj)
	if is_magazine(obj) then
		local id = obj:id()
		toggle_carried_mag(id)
		inventory_refresh()
		mag_hud.HUD:Update(true)
	end
end

function retool_mag_precondition(obj)
	if is_magazine(obj) and get_retool_section(obj) then
			return game.translate_string("st_mag_retool")
	end
end
		
function retool_mag_functor(obj)
	local mag_data = get_mag_data(obj:id())
	local tool = db.actor:object("leatherman_tool")
	local retool_section = get_retool_section(obj)
	if #mag_data.loaded > 0 then
		actor_menu.set_item_news("fail", "detail", "st_mag_err_retool") --message to unload mag first
	elseif not tool then 
			actor_menu.set_item_news('fail', 'weapon', "st_dis_text_3", " ")
	else
		new_obj = alife_create_item(retool_section, obj:parent())
		if new_obj then
			alife_release(obj)
			utils_item.degrade( tool , 0 ) --change this 
		end
	end
end



-----------------------------------------
-- SECTION weapon logic -----------------
-----------------------------------------

function actor_on_weapon_fired(obj, weapon, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
	weapon_unjammed(weapon) --this is only needed here for automatic shotguns, because they do not trigger the reload callback.

	if weapon:weapon_in_grenade_mode() then  
		return
	end
	-- printf("Do prepare weapon")
	prep_weapon(weapon, true)
end

function weapon_unjammed(weapon)
    local weapon_id = weapon:id()
    if jammed_guns[weapon_id] then
        print_dbg("Removing jammed weapon entry %s", weapon_id)
        jammed_guns[weapon_id] = nil
    end
end

function weapon_jammed(weapon)
	print_dbg("Logging jammed weapon %s", weapon:id())
	jammed_guns[weapon:id()] = true
end

function is_jammed_weapon(weapon)
	return jammed_guns[weapon:id()] or false
end

-- Load next round into the weapon. 
-- feed_next removes top round and feeds one after. otherwise feeds current
function prep_weapon(weapon, feed_next)
	local id = weapon:id()
	local mag_data = get_mag_data(id)
	local ammo_map = get_ammo_map(id) --cacheing function should keep this from being too laggy, got to look out for the potatos
	if mag_data then
		local count = #mag_data.loaded
		if feed_next then
			stack.pop(mag_data.loaded)
		end
		local round = stack.peek(mag_data.loaded)
		if round ~= nil and ammo_map[round] then
			weapon:set_ammo_type(ammo_map[round]-1)
			weapon:unload_magazine()
			weapon:set_ammo_elapsed(count)
			print_dbg("chambering round of type %s, there are %s rounds loaded, ammo in mag is %s", round, count, weapon:get_ammo_in_magazine())
			set_mag_data(id, mag_data) 
        elseif count ~= 0 then
            weapon:set_ammo_elapsed(1)
            print_dbg("mag has invalid ammo. If gun is not SVT this is a problem with the mag caliber entry")
		else
			print_dbg("mag empty")
		end
	end
end


-----------------------------------------
-- SECTION UI callbacks -----------------
-----------------------------------------
local focus_last_sec
local focus_last_id
local focus_tbl = {}


function ActorMenu_on_item_focus_receive(obj) -- highlight compatible items
	
	local sec_focus = obj:section()
	local id = obj:id()
	empty_table(focus_tbl)
	if (is_supported_weapon(obj) and id ~= focus_last_id) then
		focus_tbl = get_mags_for_basetype(get_weapon_base_type(obj))

	elseif (is_magazine(sec_focus) and sec_focus ~= focus_last_sec) then
		focus_tbl = get_magazine_caliber(sec_focus)
	elseif (IsAmmo(obj) and sec_focus ~= focus_last_sec) then
		focus_tbl = get_mags_by_ammo_type(sec_focus)
	end

	local inventory = GetActorMenu()
	if not focus_tbl or not ((#focus_tbl > 0) or (inventory and inventory:IsShown())) then
		return
	end
	
	for i=1,#focus_tbl do 
		inventory:highlight_section_in_slot(focus_tbl[i],EDDListType.iActorBag)
		inventory:highlight_section_in_slot(focus_tbl[i],EDDListType.iPartnerTradeBag)
		inventory:highlight_section_in_slot(focus_tbl[i],EDDListType.iDeadBodyBag)
		inventory:highlight_section_in_slot(focus_tbl[i],EDDListType.iActorTrade)
		inventory:highlight_section_in_slot(focus_tbl[i],EDDListType.iPartnerTrade)
	end
end


function ActorMenu_on_item_before_move(flags, npc_id, obj, mode, bag)
	flags.ret_value = flags.ret_value and not is_carried_mag(obj:id())
end




local function se_item_on_unregister(se_obj, typ)
	local id = se_obj.id
	ammo_maps[id] = nil
end

function on_game_start()
	RegisterScriptCallback("ActorMenu_on_item_before_move", ActorMenu_on_item_before_move)
	RegisterScriptCallback("ActorMenu_on_item_focus_receive", ActorMenu_on_item_focus_receive)
	RegisterScriptCallback("on_key_press", on_key_press)
	RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
	-- RegisterScriptCallback("actor_on_weapon_reload", actor_on_weapon_reload)
	RegisterScriptCallback("actor_on_weapon_jammed", weapon_jammed)
	RegisterScriptCallback("ActorMenu_on_item_drag_drop", on_item_drag_dropped)
	RegisterScriptCallback("server_entity_on_unregister",se_item_on_unregister)

end 