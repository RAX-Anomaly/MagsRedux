



-- each datum consists of the following:
-- .size = size of the slot S, M, L(this is not super important)
-- .loaded = this is a stack of rounds loaded in the magazine, each round is int, depending on what kind of round it is
-- .section = for magazines in weapons, this tracks the type of magazine that is loaded
local mags_storage = {}
-- this storage is for vested mags in specific
local carried_mags = {}

-- reverse lookups for magazine properties
local mags_by_basetype = {}
local mags_by_retool_group = {}
local basetypes_by_ammo_type ={}

local loadout_slots = 	{
						small = 2,
						medium = 0,
						large = 0,
						}


function print_dbg( text , ...)
	if (magazines_mcm.get_config("debug") or false) then
		printf( "RAX: | %s |  "..text ,time_global(), ...)
	end
	return nil
end



local look_up_table 	= ini_file_ex("magazines\\lookups.ltx")
local weapons_lookup 	= ini_file_ex("magazines\\weapons\\importer.ltx")
local loadout_lookup 	= ini_file_ex("magazines\\outfitloadouts\\importer.ltx")

-------------------------------
-- SECTION acess functions --
-------------------------------
function get_carried_mags(tbl)
	--return carried_mags			--efficency v acess control hud won't call this very often so went with acess control
	
	copy_table(tbl, carried_mags )
end

function get_data(id)
	return mags_storage[id] or nil
end

function set_data(id, data)
	mags_storage[id] = data
	if carried_mags[id] then
		carried_mags[id] = data
	end
end

function get_mag_property(id,key)
	--print_dbg("wtf:".. tostring((mags_storage[id] and mags_storage[id][key] or "no dice")))
	return mags_storage[id] and mags_storage[id][key]
end

function get_total_carried(exact)
	local carried = {
		["small"] = 0,
		["medium"] = 0,
		["large"] = 0
	}
	for id, mag in pairs(carried_mags) do
		carried[mag.size] = carried[mag.size] + 1
	end
	

	if not exact then --shift exess up to next size
		if carried.small > loadout_slots.small then
			carried.medium = carried.medium + carried.small - loadout_slots.small
			carried.small = loadout_slots.small
		end
		if carried.medium > loadout_slots.medium then
			carried.large = carried.large + carried.medium - loadout_slots.medium
			carried.medium = loadout_slots.medium
		end
		
	end
	
	
	return carried
end

function get_loadout_size()
	local copy = {}
	copy_table(copy, loadout_slots)
	return copy
end

function get_mags_for_basetype(basetype)	
	return mags_by_basetype[basetype] and dup_table(  mags_by_basetype[basetype])

end

function get_basetypes_by_ammo_type(sec)
		--print_dbg("#basetypes_by_ammo_type:%s basetypes_by_ammo_type[%s]:%s",#basetypes_by_ammo_type,sec,basetypes_by_ammo_type[sec] and #basetypes_by_ammo_type[sec])

	return basetypes_by_ammo_type[sec] and dup_table(  basetypes_by_ammo_type[sec])
end

function get_mags_by_ammo_type(sec)
	local t = {}
	local basetypes = get_basetypes_by_ammo_type(sec) or {}
	for _,v in ipairs(basetypes) do
		local mags = get_mags_for_basetype(v) or {}
		for __,v2 in ipairs(mags) do
			table.insert(t, v2)
		end
	end
	return t
end

-------------------------------
-- SECTION utility functions --
-------------------------------

local function parent_section(sec)
	return SYS_GetParam(0, sec, "parent_section", sec) or sec
end

local function type_correction(val)
    if not val then return end
--    print_dbg(type(val))
    local id, section, obj, se_obj 
    if type(val) == "string" then
        section = val
    elseif type(val) == "number" then
        id = val
        obj = level.object_by_id(id)
        se_obj = alife_object(id)
        if obj  then
			section = obj:section()
		elseif se_obj then
			section = se_obj:section()
		else
			print_dbg("WTF is:%s any way?", id)
		end
    elseif type(val.id) == "number" then
        id = val.id
        se_obj = val
        obj = level.object_by_id(id)
        section = val:section()
    elseif type(val.id) == "function" then
        id = val:id()
        obj = val
        se_obj = alife_object(id)
        section = val:section()
    end
    return id, section, obj, se_obj
end

function is_carried_mag(id)

	return carried_mags[id] and true or false
end

function toggle_carried_mag(id)
--	print_dbg("tcm1")
	if carried_mags[id] then
		carried_mags[id] = nil
			--print_dbg("tcm2")

	elseif room_in_pouch(id) then
		carried_mags[id] = mags_storage[id]
			--print_dbg("tcm3"..tostring(carried_mags[id] and carried_mags[id].section))
	end
end



function update_loadout_slots()
	local outfit = db.actor:item_in_slot(7)
	local small,medium,large =  0,0,0
	if outfit then
		small,medium,large = get_loadout_slots(outfit)
		
		--print_dbg("Outfit:%s||S:%s|M:%s|L:%s",outfit:section(), small,medium,large)
	else
		small,medium,large = get_loadout_slots("o_none")
		
		--print_dbg("Outfit:%s||S:%s|M:%s|L:%s","o_none", small,medium,large)
	end
	
	local s,m,l =  0,0,0
	local backpack = db.actor:item_in_slot(13)
	s,m,l = get_loadout_slots(backpack)
	
	--print_dbg("backpack:%s||S:%s|M:%s|L:%s",backpack and backpack:section(), s,m,l)
	
	small = small + s
	medium = medium + m
	large = large + l 
	
	--print_dbg("Outfit+backpack||S:%s|M:%s|L:%s", small,medium,large)
	
	local ss,mm,ll = 0,0,0
	db.actor:iterate_belt( function(owner, obj)
		s,m,l = get_loadout_slots(obj)
		
		--print_dbg("belt:%s||S:%s|M:%s|L:%s",obj and obj:section(), s,m,l)
		
		ss = ss + s
		mm = mm + m
		ll = ll + l
	end)
	
	--print_dbg("Belt total||S:%s|M:%s|L:%s", ss,mm,ll)
	
	small = small + ss
	medium = medium + mm
	large = large + ll 
	
	--print_dbg("total slots||S:%s|M:%s|L:%s", small,medium,large)
	
	loadout_slots.small = small 
	loadout_slots.medium = medium 
	loadout_slots.large = large 
end

function validate_loadout()
    update_loadout_slots()
	local carried = get_total_carried()
	local excess = carried.large - loadout_slots.large
	if excess < 1 then -- if they shift arround and don't over fill large all good
		--print_dbg("validate_loadout s:%s m:%s l:%s excess:%s", carried.small, carried.medium, carried.large, excess)
		return
	end
    local found = {small = 0, medium = 0, large = 0}
    for id, mag in pairs(carried_mags) do --shed exess favoring shifted mags.
		if mag.size then
            found[mag.size] = found[mag.size] + 1
            if found[mag.size] > loadout_slots[mag.size] then
                carried_mags[id] = nil
				excess = excess - 1
				if excess == 0 then break end
            end
        end
    end
	magazines.inventory_refresh()
end

function room_in_pouch(id)
	local s = mags_storage[id].size
	for id, mag in pairs(carried_mags) do -- safety purge of esccaped mags
		if not utils_item.in_actor_inv(level.object_by_id(id)) then
			carried_mags[id] = nil
		end
	end 
	carried = get_total_carried()
	return carried.large < loadout_slots.large or ((s == "medium" or s == "small") and (carried.medium < loadout_slots.medium)) or (s == "small" and (carried.small < loadout_slots.small))
end




function build_mag_revers_lookups()
	local base_types = {}
	local function itr(section)
		if not is_magazine(section) or section == "tch_mag_base" then return end
		local basetype 		= SYS_GetParam(0, section, "base_type") or nil
		local retool_group 	= SYS_GetParam(0, section, "retool_group") or nil
		local caliber = get_magazine_caliber(section)
		if basetype then
			if not mags_by_basetype[basetype] then
				mags_by_basetype[basetype] = {}
			end
			mags_by_basetype[basetype][#mags_by_basetype[basetype]+1] = section
		end
		if retool_group then
			if not mags_by_retool_group[retool_group] then
				mags_by_retool_group[retool_group] = {}
			end
			mags_by_retool_group[retool_group][#mags_by_retool_group[retool_group]+1] = section
		end
		if caliber and basetype and not base_types[basetype] then
			base_types[basetype] = true
			for i = 1, #caliber do 
				if not basetypes_by_ammo_type[caliber[i]] then
					basetypes_by_ammo_type[caliber[i]] = {}
				end
				basetypes_by_ammo_type[caliber[i]][#basetypes_by_ammo_type[caliber[i]]+1] = basetype
			end
		end
		
		
	end
	ini_sys:section_for_each(itr)
end





-- these functions work equally well given an object id, item section, gameobject or server object.
function is_supported_weapon(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	
	return weapons_lookup:section_exist(parent_section(section))
end

function has_loadout_slots(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	local in_list = loadout_lookup:section_exist(parent_section(section))
	--print_dbg("has_loadout_slots %s|%s:%s|%s", section,parent_section(section), in_list, IsItem("outfit", section, obj) )
	return IsItem("outfit", section, obj) or in_list
end


function get_retool_section(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	local retool_group 	= SYS_GetParam(0, section, "retool_group") or nil
	local retool_section = nil
	if retool_group and mags_by_retool_group[retool_group] and #mags_by_retool_group[retool_group] > 1 then --want to return nil of mag has no retool group or is only memeber
		for i,v in ipairs(mags_by_retool_group[retool_group]) do
			print_dbg("retool section: %s|%s", section, v)
			if v == section then
				if i < #mags_by_retool_group[retool_group] then
					retool_section = mags_by_retool_group[retool_group][i+1]
				else
					retool_section = mags_by_retool_group[retool_group][1]
				end
				break
			end
		end
	end
	return retool_section

end

function get_loadout_slots(val, combine, force_outfit)
	if not val then return 0,0,0 end
	id, section, obj, se_obj = type_correction(val)

	local s,m,l = 0,0,0
	if look_up_table:section_exist(section) then
		s = look_up_table:r_value(section, "mag_limit_small", 2) or s
		m = look_up_table:r_value(section, "mag_limit_medium", 2) or m
		l = look_up_table:r_value(section, "mag_limit_large", 2) or l
	elseif IsOutfit(obj) or force_outfit then
		local kind = SYS_GetParam(0, section, "kind")
		if look_up_table:section_exist(kind) then
			s = look_up_table:r_value(kind, "mag_limit_small", 2) or s
			m = look_up_table:r_value(kind, "mag_limit_medium", 2) or m
			l = look_up_table:r_value(kind, "mag_limit_large", 2) or l
		else
			print_dbg("Outfit defaulted: sec:%s kind:%s",section ,kind )
			s = look_up_table:r_value("o_none", "mag_limit_small", 2) or s
			m = look_up_table:r_value("o_none", "mag_limit_medium", 2) or m
			l = look_up_table:r_value("o_none", "mag_limit_large", 2) or l
		end
	end
	if combine then
		return {small = s,medium = m, large = l}
	else
		return s, m, l
	end
end

function is_magazine(val)
	if not val then return false end
	id, section, obj, se_obj = type_correction(val)
	return SYS_GetParam(1, section, "is_mag")
end

function get_magazine_base_type(val)

	if not val then return end
	id, section, obj, se_obj = type_correction(val)

	return SYS_GetParam(0, section, "base_type")  or nil
end

function get_magazine_caliber(val)
	return str_explode(look_up_table:r_value(get_magazine_base_type(val) or print_dbg("Missing basetype for: %s",val), "caliber") or print_dbg("Invalid basetyper for: %s",val), ",")
end

-- check if this weapon takes a magazine, and return the base type. false if it does not
function get_weapon_base_type(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	id = obj and id or nil --utils_item.get_ammo will not work if given an id of an offline object. nil id if no gameobject exists
	local ammo =  utils_item.get_ammo(section, id)[1]
	local parent = parent_section(section)
	print_dbg("for weapon %s, using ammo %s, bt is %s", parent, ammo, is_supported_weapon(section) and look_up_table:r_value(parent, ammo))
	return is_supported_weapon(section) and look_up_table:r_value(parent, ammo) -- base_type is in the ltx based on the first entry in the weapons ammo list.
end

function weapon_default_magazine(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	
	return look_up_table:r_value(parent_section(section), "default_mag")
end 

function weapon_improved_magazine(val)
	if not val then return end
	id, section, obj, se_obj = type_correction(val)
	
	return look_up_table:r_value(parent_section(section), "improved_mag")
    
end
-- check if mag is compatible w. weapon
function is_compatible(weapon, magazine) --both called functions do type correction, added argument order corection
	if not is_magazine(magazine) then
		local t = magazine
		magazine = weapon
		weapon = t
	end
    local weapon_base = get_weapon_base_type(weapon)
    local magazine_base = get_magazine_base_type(magazine)
	print_dbg("wpn base type is %s, mag base type is %s", weapon_base, magazine_base)
    return weapon_base == magazine_base
end

function get_mag_info(magazine)
	local sec = magazine:section()
	local result = {
		-- ["compatibleWeapons"] = str_explode(system_ini():r_string_ex(mag:section(), "magazine_group"),","),
		["mag_size"] = SYS_GetParam(2, sec, "max_mag_size"),
		["ammo"] = {},
		["total_ammo"] = 0,
		["ammo_type"] = get_magazine_caliber(sec)
	}
	local mag_data = get_data(magazine:id())
	if mag_data and #mag_data.loaded > 1 then
		result.total_ammo = #mag_data.loaded
		for i=1, #mag_data.loaded do
			result.ammo[mag_data.loaded[i]] = (result.ammo[mag_data.loaded[i]] or 0) + 1
		end
	end
	return result
end




-- class
function bind(obj)
     print_dbg("bound object "..obj:section())
    obj:bind_object(magazine_binder(obj))
end

class "magazine_binder" (object_binder)

function magazine_binder:__init(obj) super(obj)
	self.first_update = nil
end

-- global flag used to cap condition at 100 for trade
local freeze = false
-- update the weight and condition based on capacity
function magazine_binder:update(delta)
	object_binder.update(self, delta)
	local obj = self.object
	local id = obj:id()
	local sec = obj:section()
	if not self.first_update then
		self.first_update = true
	end
    local mag_data = mags_storage[id]
    if not mag_data then
        mag_data = {}
        mag_data.loaded = {}
        mag_data.size = SYS_GetParam(0, sec, "mag_size") or "small"
        mag_data.section = sec
        mags_storage[id] = mag_data
    end
    if freeze then 
		obj:set_condition(0.999)
		return 
	end
	local mag_weight = SYS_GetParam(2, sec, "inv_weight")
    local capacity = SYS_GetParam(2, sec, "max_mag_size")
    -- for simplicity we take the weight of each bullet to be the same
    local cond = 0
    if mag_data then
		local ammoType = get_magazine_caliber(sec)[1]
		local box_size = SYS_GetParam(2, ammoType, "box_size")
		local box_weight = SYS_GetParam(2, ammoType, "inv_weight")
		local cartridge_weight = box_weight / box_size
        cond = #mag_data.loaded / capacity
        mag_weight = mag_weight + (#mag_data.loaded * cartridge_weight)
    end
	mags_storage[id] = mag_data
    obj:set_weight(mag_weight)
    obj:set_condition(cond)
end

function magazine_binder:reload(section)
    object_binder.reload(self, section)
end

function magazine_binder:reinit()
    object_binder.reinit(self)
end

function magazine_binder:net_spawn(se_abstract)
    if not(object_binder.net_spawn(self, se_abstract)) then
        return false
    end
    return true
end

function magazine_binder:net_destroy()
	object_binder.net_destroy(self)
end

function magazine_binder:save(stpk)
end

function magazine_binder:load(stpk)
end
-- end class


-------------------------------
-- SECTION inventory highlight --
-------------------------------

-- this gets called _ALOT_ so putting it here where table can be read

local bags = {actor_bag = true,actor_trade_bag= true} --player inv in normal/looting and in the merchant UI.
ready_color = GetARGB(100, 255, 159, 82)
function check_ready(cell)
        if bags[cell.container.ID] then
			return carried_mags[cell.ID] and ready_color --cell.ID and cell.sec are the object id and section
		end
end

function icon_check_ready(cell)
	if bags[cell.container.ID] and carried_mags[cell.ID] then
		return {texture = "ui_mags_loadout", x = 1, y = 1, w = 15, h = 15}
	end
end




-------------------------------
-- SECTION  callbacks --
-------------------------------
local function save_state(mdata) 
	mdata.mags_storage = mags_storage
	mdata.carried_mags = carried_mags
end

local function load_state(mdata) 
	mags_storage = mdata.mags_storage or {}
	carried_mags = mdata.carried_mags or {}
end

local function se_item_on_unregister(se_obj, typ)
	local id = se_obj.id
	mags_storage[id] = nil
	carried_mags[id] = nil
end

local past_first_update = false
function actor_on_first_update()
	past_first_update = true
	validate_loadout()
end



function actor_item_to_slot(obj)
	if past_first_update and has_loadout_slots(obj) then
		validate_loadout()
	end
end

function on_trade_opened()
	freeze = true
end

function on_trade_closed()
	freeze = false
end


function on_game_start()
	build_mag_revers_lookups()
	rax_persistent_highlight.register("ready_mag", check_ready) --used like a callback register
	rax_icon_layers.register("ready_mag", icon_check_ready) --used like a callback register
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("actor_item_to_slot",actor_item_to_slot)
	RegisterScriptCallback("actor_item_to_ruck",actor_item_to_slot)
	RegisterScriptCallback("actor_item_to_belt",actor_item_to_slot)
	RegisterScriptCallback("server_entity_on_unregister",se_item_on_unregister)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	RegisterScriptCallback("ActorMenu_on_trade_started",on_trade_opened)
	RegisterScriptCallback("ActorMenu_on_trade_closed",on_trade_closed)
end

